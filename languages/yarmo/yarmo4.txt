Язык прграммирования ЯРМО-4
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Что получается, если приблизить ЯРМО к современным условиям.

Рассмотрим минимальное подмножество языка: без параллельных полей (слогов).

Делаем числа как в Си:
	98765		// целое десятичное положительное
	~012345		// целое восьмеричное отрицательное
	:0xabcdef	// целое шестнадцатеричное левое
	:0b10101	// целое двоичное левое
	12.23e45	// рациональное положительное

Записи в примерах:
	foo			// поле в одно слово
	/16/			// поле в 16 слов
	/4/ * bar		// массив
	(next, prev, data=bar)	// три поля

Операции:
	+ - * / %		// для целых
	< <= > >=		// для целых - выдаёт логическое
	<< >> >>> & | ^		// для всех
	== != !			// для всех - выдаёт логическое
	add sub mul div 	// для рациональных
	lt le gt ge		// для рациональных - выдаёт логическое

Засылки:
	foo -> bar		// простая засылка
	foo +-> bar		// засылка, совмещённая с операцией

Структуры управления
~~~~~~~~~~~~~~~~~~~~

	if (условие)
            предложение

	if (условие)
            предложение
	else
            предложение

	switch (предложение)
	case (предложение)
            предложение
	...
	else
            предложение

	while (условие)
            предложение
	else
            предложение

	do
            предложение
	while (условие)
	else
            предложение

Завершители:
	return (формула);
	return (формула) when (условие)
	break
	continue

Пример: вычисление факториала.

	fact(n)
	{
            if (n < 1)
                1;
            else
                fact(n-1) * n;
	}

Пример: таблица идентификаторов.

	struct ident = (name, next);
	var tab [1000] :ident;
	var dict [100];
	var ptab, pdict;

	function hash(name) =
	{
            (name >> 24) + (name >> 16) + (name >> 8) + name % 100;
	}

	function search(name) =
	{
            var ptr, elem;

            hash(name) -> ptr;
            dict[ptr] -> elem;
            if (elem != 0) {
                do {
                    if (tab[elem].name == name)
                        return (elem);
                } while (tab[elem].next -> elem);
            }
            dict[ptr] -> tab [1 +->
	}
}
